#include <stdio.h>
#include <string>
#include <cmath>
#include <iostream>

/*
==================================================

The sequence of triangle numbers is generated by adding the natural numbers.
 So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

==================================================
*/

using namespace std;

//recursive function that determines triangle number
int triangle_numbers(int sequence_number)
{
	//continues to add (n-1) until n reaches 1
	if(sequence_number >= 1)
	{
		return sequence_number + triangle_numbers(sequence_number - 1);
	}
	else
	{
		return 0;
	}
}

int main()
{
	// basic exit boolean
	bool found_it = false;
	
	// We start from the first triangle number
	
	int sequence = 1;
	
	//counts the devisors 
	int current_devisors = 0;
	
	//the number itself being tested
	int current; 
	
	while(!found_it) 
	{
		//current is used so the function doeesn't have to be called twice
		current = triangle_numbers(sequence);
		
		//loop for finding number of divisors
		for(int x = 1; x <= current; x++)
		{
			if(current % x == 0)
			{
				current_devisors++;
			}
		}
		
		//checks to see if the answer to the problem has been found
		if(current_devisors >= 500)
		{
			found_it = true;
		}
		
		//resets numbner of devisors after checking the nummber
		//If the answer was found the program is going to reset anyway
		
		current_devisors = 0;
		sequence++;
		
		
	}
	cout << current;
	return 0;
}


